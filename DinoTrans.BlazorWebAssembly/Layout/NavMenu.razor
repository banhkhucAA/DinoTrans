@inject AuthenticationStateProvider AuthenticationState
@inject IUserService userService
@inject NavigationManager NavManager

<div class="navbar navbar-expand-lg navbar-dark">
    <div class="container d-flex justify-content-between align-items-center">
        <a class="navbar-brand" href="#">
            <img src="./images/logo2.png" alt="Logo" style="max-width: 100px;" />
        </a>
        <button class="navbar-toggler" type="button" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
        </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <div class="container mt-3">
        <div class="row">
            <div class="col">
                <nav class="nav flex-column">
                    <div class="nav-item">
                        <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                            <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Dashboard
                        </NavLink>
                    </div>
                    @if (authState != null && authState.User.Identity.IsAuthenticated && (companyRole == CompanyRoleEnum.Admin || companyRole == CompanyRoleEnum.Shipper))
                    {
                        <div class="nav-item">
                            <NavLink class="nav-link" href="@($"tender/CompanyId={CompanyId}")">
                                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Tạo đấu thầu
                            </NavLink>
                        </div>
                    }
@*                     @if (authState != null && authState.User.Identity.IsAuthenticated && companyRole == CompanyRoleEnum.Shipper)
                    {
                        <div class="nav-item">
                            <NavLink class="nav-link" href="@($"contructionmachine/CompanyId={CompanyId}")">
                                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Quản lý máy xây dựng
                            </NavLink>
                        </div>
                    }
 *@                </nav>
            </div>
        </div>
    </div>
</div>

@code {
    private bool collapseNavMenu = true;
    private ResponseModel<CompanyRoleEnum> response = new();
    private CompanyRoleEnum companyRole = new();
    private bool IsChangeStep = false;
    public AuthenticationState? authState = null;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    public int CompanyId = new();
    protected override async Task OnInitializedAsync()
    {
        var customState = (CustomAuthenticationStateProvider)AuthenticationState;
        authState = await customState.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            var companyId = int.Parse(authState.User.FindFirstValue("CompanyId"));
            response = await userService.GetCompanyRole(companyId);
            if (response.Success)
            {
                CompanyId = companyId;
                if (companyRole == CompanyRoleEnum.Admin || companyRole == CompanyRoleEnum.Shipper)
                    companyRole = response.Data;
            }
        }
        else
        {
            if (!NavManager.Uri.Contains("register"))
            {
                NavManager.NavigateTo("/login");
            }
            else
            {
                NavManager.NavigateTo("/register");
            }
        }
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void ChangeColor()
    {
        IsChangeStep = true;
    }
}
