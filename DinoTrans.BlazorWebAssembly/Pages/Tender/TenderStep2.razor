@inject IConstructionMachineService ConstructionMachineService
@inject IJSRuntime js
@inject HttpClient Http
@inject ITenderService TenderService

<div class="card-body">
    <EditForm Model="InputStep2">
        <div class="column">
            @* Thời gian nhận hàng và thời gian giao hàng *@
            <div class="col-md-12 row">
                <div class="form-group col-md-6 column">
                    <header>Thời gian nhận hàng</header>
                    <div class="col-md-12">                
                        <label class="form-label">
                            Ngày nhận  hàng*
                        </label>
                        <input type="date" @bind="InputStep2.PickUpDate" class="form-control" @oninput="SearchOnInputChange" />
                        @* @if (ErrorStartDate != null)
                        {
                            <div style="color:red">@ErrorStartDate</div>
                        } *@
                    </div>
                    <div class="col-md-12">
                        <label class="form-label">
                            Giờ nhận  hàng*
                        </label>
                        <input type="time" @bind="InputStep2.PickUpTime" class="form-control" @oninput="SearchOnInputChange" />
                        @* @if (ErrorStartDate != null)
                        {
                            <div style="color:red">@ErrorEndDate</div>
                        } *@
                    </div>
                </div>
                <div class="form-group col-md-6 column">
                    <header>Thời gian giao hàng</header>
                    <div class="col-md-12">
                        <label class="form-label">
                            Ngày giao hàng*
                        </label>
                        <input type="date" @bind="InputStep2.DeliveryDate" class="form-control" @oninput="SearchOnInputChange" />
                    </div>
                    <div class="col-md-12">
                        <label class="form-label">
                            Giờ giao hàng *
                        </label>
                        <input type="time" @bind="InputStep2.DeliveryTime" class="form-control" @oninput="SearchOnInputChange" />
                    </div>
                </div>
            </div>
            @*  Máy cần vận chuyển *@
            <div class="col-md-12">
                <div class="row">
                    <header class="col-md-6">Thông tin máy xây dựng</header>
                    <NewConstructionMachineDialog IsDefaultEvent=IsDefaultEvent CallDefaultEvent=HandleDefaultEvent addedmachine="recallAPI" CompanyId="CompanyId"></NewConstructionMachineDialog>
                </div>                
            </div>
            <div>
                <input type="text" class="form-control" value="@searchText"
                       @onchange="@((ChangeEventArgs e) => ChangeText(e))"
                       placeholder="Search for construction machinery & equipment..." />
            </div>
            <ConstructionMachineList ListConstructionMachineIdsReturn="HandleChooseMachines" constructionMachinesListChooses="contructionMachinesChoose"></ConstructionMachineList>
            <div class="float-end">
                <Pagination ActivePageNumber="@currentPageNumber"
                            TotalPages="TotalPage"
                            DisplayPages="2"
                            FirstLinkIcon="IconName.ChevronDoubleLeft"
                            PreviousLinkIcon="IconName.ChevronLeft"
                            NextLinkIcon="IconName.ChevronRight"
                            LastLinkIcon="IconName.ChevronDoubleRight" 
                            PageChanged="OnPageChangedAsync" />
            </div>
            @*Địa chỉ và liên lạc nhận hàng và giao hàng*@
            <div class="col-md-12 row">
                <div class="form-group col-md-6 column">
                    <header>Thông tin nhận hàng</header>
                    <div class="col-md-12">
                        <label class="form-label">
                            Địa chỉ nhận hàng *
                        </label>
                        <input type="text" @bind="InputStep2.PickUpAddress" class="form-control" />
                        @* @if (ErrorStartDate != null)
                        {
                        <div style="color:red">@ErrorStartDate</div>
                        } *@
                    </div>
                    <div class="col-md-12">
                        <label class="form-label">
                            Liên hệ nhận hàng *
                        </label>
                        <input type="text" @bind="InputStep2.ContactAtPickUpAddress" class="form-control" />
                        @* @if (ErrorStartDate != null)
                        {
                        <div style="color:red">@ErrorEndDate</div>
                        } *@
                    </div>
                </div>
                <div class="form-group col-md-6 column">
                    <header>Thông tin giao hàng</header>
                    <div class="col-md-12">
                        <label class="form-label">
                            Địa chỉ giao hàng *
                        </label>
                        <input type="text" @bind="InputStep2.DeliveryAddress" class="form-control" />
                    </div>
                    <div class="col-md-12">
                        <label class="form-label">
                            Liên hệ giao hàng *
                        </label>
                        <input type="text" @bind="InputStep2.ContactAtDeliveryAddress" class="form-control" />
                    </div>
                </div>
            </div>

            @*Ghi chú và tài liệu*@
            <div class="col-md-12 row">
                    <header>Mô tả và tài liệu đính kèm</header>

                    <div class="col-md-6">
                        <label class="form-label">
                            Mô tả *
                        </label>
                        <textarea type="text" @bind="InputStep2.Notes" class="form-control" />
                        @* @if (ErrorStartDate != null)
                        {
                        <div style="color:red">@ErrorStartDate</div>
                        } *@
                    </div>

                    <div class="col-md-6">
                        <span>
                            <label class="form-label">
                                Tài liệu đính kèm *
                            </label>
                        <label class="btn btn-outline-success float-end" style="position: relative; overflow: hidden;">
                            <span>+ Upload a document</span>
                            <InputFile id="fileInput" OnChange="@HandleFileSelection" multiple style="opacity: 0; width: 150px; height: 150px; position: absolute; top: 0; left: 0; cursor: pointer; z-index: 2;" />
                        </label>
                        </span>
                        <div class="mt-3">
                            @if (selectedFiles != null && selectedFiles.Count > 0)
                            {
                                @foreach (var file in selectedFiles)
                                {
                                    <tr>
                                        <td style="padding-right:10px">@file.Name</td>
                                        <td>
                                            <button class="btn btn-outline-danger" @onclick="() => RemoveDocument(file)">- Remove from Tender</button>
                                        </td>
                                    </tr>
                                }
                            }
                        </div>
                    </div>
             </div> 
        </div>

        <div class="form-group row float-end me-4">
            <button class="btn btn-primary mt-4" type="submit" @onclick="OnHandleSubmit">Bước tiếp theo</button>
        </div>
    </EditForm>
</div>
@code {
    [Parameter]
    public DinoTrans.Shared.Entities.Tender? NewTender { get; set; } = null;
    [Parameter]
    public int CompanyId { get; set; }
    public ConvertStep2 InputStep2 { get; set; } = new();
    public SearchLoadForTenderDTO searchLoadForTenderDTO = new();
    public List<ContructionMachine> contructionMachines = new();
    public List<ConstructionMachinesListChoose> contructionMachinesChoose = new();
    public List<int> MachineIdsStep2 { get; set; } = new();
    public int TotalPage { get; set; }
    public int currentPageNumber = 1;
    public string searchText { get; set; } = "";
    public bool IsDefaultEvent { get; set; } = false;
    public string ErrorDisplay = "";
    List<InputFileData> selectedFiles = new List<InputFileData>();
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 1024 * 3;
    private List<string> MyDocuments { get; set; } = new();
    public class InputFileData
    {
        public string Name { get; set; }
        public byte[] Data { get; set; }
    }
    [Parameter]
    public EventCallback<TenderChangeStepDTO> OnStep2Change{ get; set; }

    protected override async Task OnInitializedAsync()
    {
        var endDateString = NewTender!.EndDate.ToString("yyyy-MM-dd");
        DateOnly enddateOnly = DateOnly.Parse(endDateString);
        InputStep2.PickUpDate = enddateOnly.AddDays(1);
        InputStep2.DeliveryDate = enddateOnly.AddDays(1);
        InputStep2.PickUpTime = new();
        InputStep2.DeliveryTime = InputStep2.PickUpTime.AddHours(1);
        InputStep2.PickUpAddress = "";
        InputStep2.DeliveryAddress = "";
        InputStep2.ContactAtPickUpAddress = "";
        InputStep2.ContactAtDeliveryAddress = "";
        InputStep2.Notes = "";
        InputStep2.Documentations = "";
        await SearchOnInputChange();
    }

    private void HandleChooseMachines(List<int> MachineIds)
    {
        MachineIdsStep2 = MachineIds;
    }

    public async void HandleFileSelection(InputFileChangeEventArgs e)
    {
        loadedFiles = e.GetMultipleFiles().ToList();
        foreach (var file in e.GetMultipleFiles())
        {
            var buffer = new byte[file.Size];
            try
            {
                await file.OpenReadStream().ReadAsync(buffer);
            }catch(Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            selectedFiles.Add(new InputFileData { Name = file.Name, Data = buffer });
        }
        StateHasChanged();
    }

    public void RemoveDocument(InputFileData input)
    {
        selectedFiles.Remove(input);
        StateHasChanged();
    }

    private async Task OnHandleSubmit()
    {
        if (MachineIdsStep2 == null || MachineIdsStep2.Count == 0)
        {
            ErrorDisplay = "Please choose construction machine";
            await js.InvokeVoidAsync("alert", ErrorDisplay);
            return;
        }

        var result = new ResponseModel<Shared.Entities.Tender>();

        if (loadedFiles.Count > 0)
        {
            try
            {
                using var content = new MultipartFormDataContent();
                foreach (var file in loadedFiles)
                {
                    var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
                    fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
                    MyDocuments.Add(file.Name.Replace(" ", ""));
                    content.Add(
                        content: fileContent,
                        name: "\"files\"",
                        fileName: file.Name);
                }
                var response = await Http.PostAsync($"/api/File/UploadTenderDocuments?TenderId={NewTender!.Id}", content);
                var newUploadResults = await response.Content.ReadFromJsonAsync<List<UploadResult>>();
                if (newUploadResults is not null && newUploadResults.Count > 0)
                {
                    var tenderStep2 = new UpdateTenderStep2AndCreateTenderContructionMachineDTO();
                    tenderStep2.TenderId = NewTender.Id;
                    tenderStep2.PickUpDateAndTime = DateTime.Parse($"{InputStep2.PickUpDate} {InputStep2.PickUpTime}");
                    tenderStep2.DeliveryDateAndTime = DateTime.Parse($"{InputStep2.DeliveryDate} {InputStep2.DeliveryTime}");
                    tenderStep2.ContactAtDeliveryAddress = InputStep2.ContactAtDeliveryAddress;
                    tenderStep2.ContactAtPickUpAddress = InputStep2.ContactAtPickUpAddress;
                    tenderStep2.ConstructionMachineIds = MachineIdsStep2;
                    tenderStep2.PickUpAddress = InputStep2.PickUpAddress;
                    tenderStep2.DeliveryAddress = InputStep2.DeliveryAddress;
                    tenderStep2.Notes = InputStep2.Notes;
                    tenderStep2.Documentations = newUploadResults.Select(u => u.FilePath).ToList();
                    result = await TenderService.CreateTenderStep2(tenderStep2);
                    if (result.Success)
                    {
                        var tender = result.Data;
                        await OnStep2Change.InvokeAsync(new TenderChangeStepDTO
                        {
                            CurrentStep = 2,
                            Tender = new Shared.Entities.Tender
                            {
                                Id = tender.Id,
                                TenderStatus = tender.TenderStatus,
                                Name = tender.Name,
                                CompanyShipperId = tender.CompanyShipperId,
                                CompanyCarrierId = tender.CompanyCarrierId,
                                StartDate = tender.StartDate,
                                EndDate = tender.EndDate,
                                FinalPrice = tender.FinalPrice,
                                IsCarrierComfirm = tender.IsCarrierComfirm,
                                IsShipperComfirm = tender.IsShipperComfirm,
                                PickUpDate = tender.PickUpDate,
                                DeiliverDate = tender.DeiliverDate,
                                PickUpAddress = tender.PickUpAddress,
                                PickUpContact = tender.PickUpContact,
                                DeliveryAddress = tender.DeliveryAddress,
                                DeliveryContact = tender.DeliveryContact,
                                Notes = tender.Notes,
                                Documentations = tender.Documentations

                            }
                        });
                    }
                }           

            }
            catch (Exception ex)
            {
                await js.InvokeVoidAsync("alert", ex.Message);
            }
        }
    }

    private async Task SearchOnInputChange()
    {
        try
        {
            DateTime startDate = DateTime.Parse($"{InputStep2.PickUpDate} {InputStep2.PickUpTime}");
            DateTime endDate = DateTime.Parse($"{InputStep2.DeliveryDate} {InputStep2.DeliveryTime}");
            searchLoadForTenderDTO = new SearchLoadForTenderDTO
            {
                pageIndex = currentPageNumber,
                pageSize = 5,
                SearchText = searchText,
                TenderId = NewTender!.Id,
                PickUpDate = startDate,
                DeliveryDate = endDate
            };
            var response = await ConstructionMachineService.SearchConstructionMachineForTender(searchLoadForTenderDTO);
            if(response.Success)
            {
                contructionMachines = response.Data.contructionMachines;
                contructionMachinesChoose = new();
                foreach (var item in contructionMachines)
                {
                    contructionMachinesChoose.Add(new ConstructionMachinesListChoose
                    {
                        Id = item.Id,
                        Name = item.Name,
                        Brand = item.Brand,
                        SerialNumber = item.SerialNumber,
                        CompanyShipperId = item.CompanyShipperId,
                        Image = item.Image,
                        Length = item.Length,
                        Width = item.Width,
                        Height = item.Height,
                        Weight = item.Weight
                    });
                }
                TotalPage = response.Data.TotalPage;
            }
        }catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task OnPageChangedAsync(int newPageNumber)
    {
        await Task.Run(() => { currentPageNumber = newPageNumber; });
        await SearchOnInputChange();
    }

    private async Task recallAPI()
    {
        await SearchOnInputChange();
    }

    private async Task ChangeText(ChangeEventArgs e)
    {
        IsDefaultEvent = true;
        searchText = e?.Value.ToString();
        await SearchOnInputChange();
    }

    public void HandleDefaultEvent(bool newStatus)
    {
        IsDefaultEvent = newStatus;
    }
}
