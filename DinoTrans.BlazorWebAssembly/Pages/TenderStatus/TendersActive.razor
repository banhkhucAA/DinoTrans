@page "/Tenders/Active"
@inject ITenderService TenderService
@inject IJSRuntime js
@inject NavigationManager nav
@using System.Timers
<PageTitle>TendersActive</PageTitle>
<div class="card-body">
    <div><b>Tất cả thầu đang hoạt động</b></div>
    <hr />
    <div class="col-md-12 row">
        <div class="col-md-6 column">
            <div>
                <label class="form-label">
                    Tìm kiếm đấu thầu
                </label>
            </div>
            <div>
                <input type="text" placeholder="Tìm kiếm theo số hiệu thầu, tên thầu và tên máy..." size="45" maxlength="45" @bind="searchDTO.SearchText" @oninput="SetSearchTextChange">
            </div>
        </div>

        <div class="col-md-3 column">
            <div>
                <label class="form-label">
                    Lọc theo hạng cân
                </label>
            </div>
            <div>
                <select title="Tất cả" @oninput="SetLoadsChange">
                    <option value="0" label="Tất cả">Tất cả</option>
                    <option value="1" label="Dưới 8 tấn">Dưới 8 tấn</option>
                    <option value="2" label="Từ 8 tới 22 tấn">Từ 8 tới 22 tấn</option>
                    <option value="3" label="Trên 22 tấn">Trên 22 tấn</option>
                </select>
            </div>
        </div>

        <div class="col-md-3 column">
            <div>
                <label class="form-label">
                    Lọc theo số lượng công ty đấu giá
                </label>
            </div>
            <div>
                <select title="Tất cả" @oninput="SetOffersChange">
                    <option value="0">Tất cả</option>
                    <option value="1">Không có công ty nào</option>
                    <option value="2">Có dưới 5 công ty</option>
                    <option value="3">Có trên 5 công ty</option>
                </select>
            </div>
        </div>
    </div>

    <br />
    <br />

    <div style="overflow-x: auto;">
        <table class="table">
            <thead>
                <tr>
                    <th class="table-tender">Số hiệu thầu</th>
                    <th class="table-tender">Tên thầu</th>
                    <th class="table-tender">Danh sách máy</th>
                    <th class="table-tender">Địa chỉ nhận</th>
                    <th class="table-tender">Địa chỉ giao</th>
                    <th class="table-tender">Thời gian nhận muộn nhất</th>
                    <th class="table-tender">Thời gian giao muộn nhất</th>
                    <th class="table-tender">Công ty tạo thầu</th>
                    <th class="table-tender">Trạng thái</th>
                    <th class="table-tender">Thời gian còn lại</th>
                    <th class="table-tender">Số lượng đặt giá</th>
                    <th class="table-tender">Hành động</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in activeTimeElapses!)
                {
                    <tr>
                        <td class="table-tender">@($"#000{item.TenderId}")</td>
                        <td class="table-tender">@item.TenderName</td>
                        <td class="table-tender">
                            @foreach(var machine in item.ConstructionMachines)
                            {
                                <div style="display: block;">@machine.Name - @machine.SerialNumber - @machine.Brand</div>
                            }
                        </td>
                        <td class="table-tender">@item.From</td>
                        <td class="table-tender">@item.To</td>
                        <td class="table-tender">@item.PickUpDate</td>
                        <td class="table-tender">@item.DeliveryDate</td>
                        <td class="table-tender">@item.CompanyShipperName</td>
                        <td class="table-tender">@item.Status</td>
                        <td class="table-tender">@item.TimeLeft</td>
                        <td class="table-tender">
                            <button class="button-offers">
                                @item.Bids Đề nghị
                            </button>
                        </td>
                        <td class="table-tender">
                            <span>
                                <button @onclick="() => TenderDetails(item.TenderId)">
                                    <img class="img-active-tenders" src="/images/eye-1915455_960_720.png" alt="Eye Icon">
                                </button>
                                <button>
                                    <img class="img-active-tenders" src="/images/BackArrow.png" alt="Back Arrow">
                                </button>
                            </span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="float-end">
        <Pagination ActivePageNumber="@searchDTO.pageIndex"
                    TotalPages="TotalPage"
                    DisplayPages="2"
                    FirstLinkIcon="IconName.ChevronDoubleLeft"
                    PreviousLinkIcon="IconName.ChevronLeft"
                    NextLinkIcon="IconName.ChevronRight"
                    LastLinkIcon="IconName.ChevronDoubleRight"
                    PageChanged="OnPageChangedAsync" />
    </div>
</div>
@code {
    public List<TenderActiveDTO> listActive { get; set; } = new();
    public ApplicationUser _user { get; set; }
    public List<ActiveTimeElapse> activeTimeElapses { get; set; } = new();
    public SearchTenderActiveDTO searchDTO = new SearchTenderActiveDTO();
    public int TotalPage { get; set; }
    public class ActiveTimeElapse
    {
        public int TenderId { get; set; }
        public string TenderName { get; set; }
        public List<ContructionMachine> ConstructionMachines { get; set; }
        public string From { get; set; }
        public string To { get; set; }
        public DateTime PickUpDate { get; set; }
        public DateTime DeliveryDate { get; set; }
        public string Status { get; set; }
        public double TimeRemaining { get; set; }
        public int Bids { get; set; }
        public int CompanyShipperId { get; set; }
        public string CompanyShipperName { get; set; }
        public Timer Timer { get; set; }
        public string TimeLeft { get; set; }
    }
    private async Task OnPageChangedAsync(int newPageNumber)
    {
        await Task.Run(() => { searchDTO.pageIndex = newPageNumber; });
        await CallSearchActiveBy();
    }
    public async Task SetSearchTextChange(ChangeEventArgs e)
    {
        searchDTO.SearchText = e.Value.ToString();
        searchDTO.pageIndex = 1;
        await CallSearchActiveBy();
    }
    public async Task SetLoadsChange(ChangeEventArgs e)
    {
        if (SearchActiveByMachines.TryParse(e.Value.ToString(), out SearchActiveByMachines searchLoads))
        {
            searchDTO.searchLoads = searchLoads;
            await CallSearchActiveBy();
        }
    }
    public async Task SetOffersChange(ChangeEventArgs e)
    {
        if (SearchActiveByOffers.TryParse(e.Value.ToString(), out SearchActiveByOffers searchOffers))
        {
            searchDTO.searchOffers = searchOffers;
            await CallSearchActiveBy();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await CallSearchActiveBy();

    }

    public void TenderDetails(int TenderId)
    {
        nav.NavigateTo($"/Tenders/Active/{TenderId}");
    }

    private async Task CallSearchActiveBy()
    {
        var result = await TenderService.SearchActiveBy(searchDTO, _user);

        if (result.Success)
        {
            listActive = result.Data;
            TotalPage = result.PageCount;
            activeTimeElapses = new();
            foreach (var item in listActive)
            {
                activeTimeElapses.Add(new ActiveTimeElapse
                {
                    TenderId = item.TenderId,
                    TenderName = item.TenderName,
                    ConstructionMachines = item.ConstructionMachines,
                    From = item.From,
                    To = item.To,
                    PickUpDate = item.PickUpDate,
                    DeliveryDate = item.DeliveryDate,
                    Status = item.Status,
                    TimeRemaining = item.TimeRemaining,
                    Bids = item.Bids,
                    CompanyShipperId = item.CompanyShipperId,
                    CompanyShipperName = item.CompanyShipperName,
                    Timer = new(1000)
                });
            }
            foreach (var item in activeTimeElapses)
            {
                item.Timer.Elapsed += (sender, EventArgs) => CountDown(item);
                item.Timer.Start();
            }
        }
        else
        {
            await js.InvokeVoidAsync("alert", result.Message);
        }
    }

    private async void CountDown(ActiveTimeElapse item)
    {
        item.TimeRemaining--;
        int hours = (int)item.TimeRemaining / 3600;
        int minutes = (int)item.TimeRemaining / 60 - hours * 60;
        int seconds = (int)item.TimeRemaining - hours * 3600 - minutes * 60;
        item.TimeLeft = $"{hours}h:{minutes}m:{seconds}s";
        if (hours <= 0 && minutes <= 0 && seconds <=0)
        {
            item.Timer.Stop();
            var result = await TenderService.UpdateStatusAuto(new List<int> { item.TenderId });
            if (result.Flag)
                activeTimeElapses.Remove(item);
        }
        StateHasChanged();
    }
}
