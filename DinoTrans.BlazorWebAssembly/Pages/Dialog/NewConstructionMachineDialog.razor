@inject IJSRuntime js
@inject IConstructionMachineService ConstructionMachineService
@inject HttpClient Http

<div class="col-md-6" >
    <button style="max-width:150px" class="float-end me-4 btn btn-primary" @onclick="OpenDialog">
        Tạo mới máy
    </button>
    <dialog style="position:fixed; top:50%; left:50%; transform: translate(-50%, -50%); min-width:500px; min-height:500px" id="my-dialog">
        <EditForm Model="newConstructionMachine">
            <div class="card">
                <div class="column">
                    <div class="card-header text-center column">
                        <img src="/images/ModelConstruction.png" />
                        <div>Create new construction machine</div>
                    </div>
                    <div class="card-body p-4">
                        <div class="form-group mt-3">
                            <label class="form-label">Product Name</label>
                            <input type="text" @bind="newConstructionMachine.Name" class="form-control" />
                        </div>

                        <div class="form-group mt-3">
                            <label class="form-label">Brand</label>
                            <input type="text" @bind="newConstructionMachine.Brand" class="form-control" />
                        </div>

                        <div class="form-group mt-3">
                            <label class="form-label">SerialNumber</label>
                            <input type="text" @bind="newConstructionMachine.SerialNumber" class="form-control" />
                        </div>

                        <div class="form-group mt-3">
                            <label class="form-label">Length</label>
                            <input type="number" @bind="newConstructionMachine.Length" class="form-control" />
                        </div>

                        <div class="form-group mt-3">
                            <label class="form-label">Width</label>
                            <input type="number" @bind="newConstructionMachine.Width" class="form-control" />
                        </div>

                        <div class="form-group mt-3">
                            <label class="form-label">Height</label>
                            <input type="number" @bind="newConstructionMachine.Height" class="form-control" />
                        </div>

                        <div class="form-group mt-3">
                            <label class="form-label">Weight</label>
                            <input type="number" @bind="newConstructionMachine.Weight" class="form-control" />
                        </div>
                        <div class="form-group mt-3">
                            <label class="form-label">Add Images</label>
                            <InputFile OnChange="@HandleFileSelection" multiple />
                        </div>
                    </div>
                    <div class="card-footer row">
                        <div class="form-group col-md-6">
                            <button class="btn btn-secondary ms-2" type="submit" @onclick="Close">Cancel</button>
                        </div>
                        <div class="form-group col-md-6">
                            <button style="max-width:100px" class="btn btn-primary float-end me-2" type="submit" @onclick="CreateMachine">Create</button>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>

        @if(errors.Count > 0)
        {
            <h2>Errors</h2>
            <ul class="text-danger">
                @foreach(var item in errors)
                {
                    <li>@item</li>
                }
            </ul>
        }
    </dialog>
</div>

@code {
    private long maxFileSize = 1024 * 1024 * 3;
    private int maxAllowedFiles = 3;
    private List<string> errors = new();
    private List<IBrowserFile> loadedFiles = new();
    CreateContructionMachineDTO newConstructionMachine = new();
    [Parameter]
    public int CompanyId { get; set; }
    [Parameter]
    public EventCallback addedmachine { get; set; }
    [Parameter]
    public EventCallback<bool> CallDefaultEvent { get; set; }
    [Parameter]
    public bool IsDefaultEvent { get; set; } = false;
    private List<string> MyImages { get; set; } = new();
    private List<UploadResult> uploadResults = new();

    protected override async Task OnInitializedAsync()
    {
        newConstructionMachine.CompanyShipperId = CompanyId;
    }

    void HandleFileSelection(InputFileChangeEventArgs e)
    {
        loadedFiles = e.GetMultipleFiles().ToList();
    }

    async void Close()
    {
        await js.InvokeVoidAsync("closeModal");
    }

    async Task OpenDialog()
    {
        if (IsDefaultEvent == true)
        {
            IsDefaultEvent = false;
            await CallDefaultEvent.InvokeAsync(IsDefaultEvent);
            return;
        }
        await js.InvokeVoidAsync("myJavaScriptFunction");
    }

    private async Task<ResponseModel<object>> CreateMachine()
    {
        var result = new ServiceResponses.GeneralResponse(false,"");
        if (loadedFiles.Count > maxAllowedFiles)
        {
            errors.Add($"Error: Attemping to upload {loadedFiles.Count} files, but only {maxAllowedFiles} files are allowed");
            return new ResponseModel<object>
            {
                Message = "Fail to add images",
                Success = false,
                Data = errors
            };
        };
        if (loadedFiles.Count > 0)
        {
            try
            {
                using var content = new MultipartFormDataContent();
                foreach (var file in loadedFiles)
                {
                    var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
                    fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
                    MyImages.Add(file.Name);
                    content.Add(
                        content: fileContent,
                        name: "\"files\"",
                        fileName: file.Name);
                }
                var response = await Http.PostAsync("/api/File", content);
                var newUploadResults = await response.Content.ReadFromJsonAsync<List<UploadResult>>();
                if(newUploadResults is not null)
                {
                    uploadResults = uploadResults.Concat(newUploadResults).ToList();
                }
                result = await ConstructionMachineService.CreateContructionMachine(newConstructionMachine);
                if (result.Flag)
                {
                    await addedmachine.InvokeAsync();
                }
                
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
            }
        }
        return new ResponseModel<object>
        {
            Message = result.Message,
            Success = result.Flag
        };

    }
}
